{"version":3,"sources":["firebase/index.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","App","useState","url","setUrl","key","setKey","file","setFile","useEffect","ref","list","maxResults","then","result","items","forEach","imageRef","getDownloadURL","catch","error","className","placeholder","autoComplete","onKeyDown","e","target","value","type","onChange","files","put","on","snapshot","console","log","child","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qPAcAA,IAASC,cAXc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAInB,IAAMC,EAAUV,IAASU,UCuDVC,MAlEf,WAAgB,IAAD,EAESC,mBAAS,IAFlB,mBAENC,EAFM,KAEDC,EAFC,OAGSF,oBAAS,GAHlB,mBAGNG,EAHM,KAGDC,EAHC,OAIWJ,oBAAS,GAJpB,mBAINK,EAJM,KAIAC,EAJA,KAqDb,OA/CAC,qBAAU,WACST,EAAQU,IAAI,UAClBC,KAAK,CAACC,WAAW,IAAIC,MAAK,SAASC,GAC5CA,EAAOC,MAAMC,SAAQ,SAASC,GAE5BA,EAASC,iBAAiBL,MAAK,SAASV,GAEtCC,EAAOD,MACNgB,OAAM,SAASC,aAInBD,OAAM,SAASC,SAGjB,IAiCD,yBAAKC,UAAU,OACXhB,GACA,2BAAOgB,UAAU,MAAMC,YAAY,mBAAmBC,aAAa,MAAMC,UAjCzD,SAACC,GACP,UAAVA,EAAEpB,KACkB,QAAnBoB,EAAEC,OAAOC,QACVnB,GAAQ,GACRF,GAAO,OA+BPC,GACA,2BAAOqB,KAAK,OAAOP,UAAU,OAAOQ,SA3BrB,SAAAJ,GAChBA,EAAEC,OAAOI,MAAM,IACG9B,EAAQU,IAAI,gBAAgBqB,IAAIN,EAAEC,OAAOI,MAAM,IACvDE,GACT,iBACA,SAAAC,OACA,SAAAb,GAAWc,QAAQC,IAAIf,MACvB,WACEpB,EACGU,IAAI,UAEJ0B,MAAM,SACNlB,iBACAL,MAAK,SAAAV,GACJC,EAAOD,YAef,yBAAKkB,UAAU,QAAQgB,IAAKlC,EAAKmC,IAAKnC,EAAKuB,OAAO,aCrDpCa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAC,GACLc,QAAQd,MAAMA,EAAMkC,a","file":"static/js/main.e69f6155.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCMYTnedjKhiW_0e1Ly3Of2049oOpns4ZA\",\r\n    authDomain: \"image-view-demo.firebaseapp.com\",\r\n    databaseURL: \"https://image-view-demo.firebaseio.com\",\r\n    projectId: \"image-view-demo\",\r\n    storageBucket: \"image-view-demo.appspot.com\",\r\n    messagingSenderId: \"153739112795\",\r\n    appId: \"1:153739112795:web:13fec5bee5ed228fcc6a7e\",\r\n    measurementId: \"G-JBT0DWSDPZ\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nconst storage = firebase.storage();\r\nexport {storage, firebase as default};","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport {storage} from \"./firebase\";\n\nfunction App() {\n\n  const [url, setUrl] = useState(\"\");\n  const [key, setKey] = useState(true);\n  const [file, setFile] = useState(false);\n\n  useEffect(()=>{\n    var storageRef = storage.ref(\"images\");\n    storageRef.list({maxResults:1}).then(function(result) {\n      result.items.forEach(function(imageRef) {\n        // And finally display them\n        imageRef.getDownloadURL().then(function(url) {\n          // TODO: Display the image on the UI\n          setUrl(url);\n        }).catch(function(error) {\n          // Handle any errors\n        });\n      });\n    }).catch(function(error) {\n      // Handle any errors\n    });\n  }, [])\n  \n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter'){\n      if(e.target.value === '123'){\n        setFile(true);\n        setKey(false);\n      }\n    }\n  }\n\n  const handleUpload = e => {\n    if(e.target.files[0]){\n      const uploadTask = storage.ref('images/image').put(e.target.files[0]);\n      uploadTask.on(\n        \"state_changed\",\n        snapshot => {},\n        error => { console.log(error)},\n        () => {\n          storage\n            .ref(\"images\")\n            //.child(image.name)\n            .child('image')\n            .getDownloadURL()\n            .then(url => {\n              setUrl(url)\n            });\n        }\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      { key &&\n        <input className='key' placeholder='Enter serect key' autoComplete='off' onKeyDown={handleKeyDown}/>\n      }\n      { file &&\n        <input type=\"file\" className=\"file\" onChange={handleUpload}/>\n      }\n      <img className=\"image\" src={url} alt={url} target=\"_blank\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}